@page "/superheroes"
@inject ISuperHeroService SuperHeroService
@inject NavigationManager NavigationManager
@implements IDisposable

<h3>SuperHeroes</h3>

@if (SuperHeroService.Heroes.Count == 0)
{
    <span>Loading Super Heroes...</span>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>First Name</th>
                <th>Last Name</th>
                <th>Hero Name</th>
                <th>Comic</th>
                <th>Last Edited by</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var hero in SuperHeroService.Heroes)
            {
                <tr>
                    <td>@hero.FirstName</td>
                    <td>@hero.LastName</td>
                    <td>@hero.HeroName</td>
                    <td>@hero.Comic.Name</td>
                    <td>@getUsername(@hero.EditorId).Result</td>
                    <td>
                        <button class="btn btn-primary" @onclick="(() => showHero(hero.Id))">Show</button>
                    </td>
                    <td>
                        <button class="btn btn-danger" @onclick="(() => deleteHero(hero.Id))">Delete</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>

}

<EditSuperHero></EditSuperHero>

@code {
    protected override async Task OnInitializedAsync()
    {
        await SuperHeroService.GetSuperHeroes();
        SuperHeroService.OnChange += StateHasChanged;
    }

    void showHero(int id)
    {
        NavigationManager.NavigateTo($"superhero/{id}");
    }

    void deleteHero(int id)
    {
        SuperHeroService.DeleteSuperHeroes(id);
    }

    public void Dispose()
    {
        SuperHeroService.OnChange -= StateHasChanged;
    }

    async Task<string> getUsername(string id)
    {
        return await SuperHeroService.GetUsername(id);
    }
}
