@using Tewr.Blazor.FileReader
@using System.IO

@page "/register"
@inject IUsersServices UserServices
@inject IJSRuntime js
@inject IFileReaderService fileReader

<h3>Register</h3>

<EditForm Model="User" OnSubmit="HandleSubmit">
    <div class="form-group">
        <label>First Name:</label>
        <InputText @bind-Value="User.FName" class="form-control" required pattern="^(?=.*[A-ZAa-z])([A-Z])([a-z]{2,29})$"></InputText>
    </div>
    <div class="form-group">
        <label>Last Name:</label>
        <InputText @bind-Value="User.LName" class="form-control" required pattern="^(?=.*[A-ZAa-z])([A-Z])([a-z]{2,29})$"></InputText>
    </div>
    <div class="form-group">
        <label>Email:</label>
        <InputText @bind-Value="User.Email" class="form-control" type="email" required></InputText>
    </div>
    <div class="form-group">
        <label>Password:</label>
        <InputText @bind-Value="User.Password" class="form-control" type="password" required pattern="(?=.*[a-z])(?=.*[A-Z])(?=.*[0-9])[a-zA-Z0-9]{8,}"></InputText>
    </div>
    <div class="form-group">
        <label>Avatar:</label>
        <input @ref=inputReference class="form-control" type="file"/>
    </div>

    <button type="submit" class="btn btn-primary">Submit</button>
    <p>@recordSet</p>
</EditForm>


@code {
    ElementReference inputReference;
    public string recordSet = "";
    public Yottabyte.Shared.UserIM User { get; set; } = new Yottabyte.Shared.UserIM();
    public Stream avatarImg = null;

    protected override async Task OnInitializedAsync()
    {
        UserServices.OnChange += StateHasChanged;
    }

    async void HandleSubmit()
    {
        var file = (await fileReader.CreateReference(inputReference).EnumerateFilesAsync()).FirstOrDefault();

        string filename = null;

        if (file != null)
        {
            var fileInfo = await file.ReadFileInfoAsync();
            filename = fileInfo.Name;

            using (var ms = await file.CreateMemoryStreamAsync((int)fileInfo.Size))
            {
                avatarImg = new MemoryStream(ms.ToArray());
            }
        }

        recordSet = "Loading... Please wait!";
        StateHasChanged();
        await js.InvokeVoidAsync("console.log", User);
        recordSet = await UserServices.CreateUser(User, avatarImg, filename);
        Console.WriteLine(recordSet);
        UserServices.OnChange += StateHasChanged;
        StateHasChanged();
    }

    async Task OnFileChanged()
    {

    }
}
